// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2832.Robot_2015;

import org.usfirst.frc2832.Robot_2015.commands.CClampsForward;
import org.usfirst.frc2832.Robot_2015.commands.CClampsReverse;
import org.usfirst.frc2832.Robot_2015.commands.CloseFork;
import org.usfirst.frc2832.Robot_2015.commands.CloseIngestor;
import org.usfirst.frc2832.Robot_2015.commands.DebugHardware;
import org.usfirst.frc2832.Robot_2015.commands.Delay;
import org.usfirst.frc2832.Robot_2015.commands.Ingest;
import org.usfirst.frc2832.Robot_2015.commands.LowerFork;
import org.usfirst.frc2832.Robot_2015.commands.LowerOneLevel;
import org.usfirst.frc2832.Robot_2015.commands.MoveDistance;
import org.usfirst.frc2832.Robot_2015.commands.OpenFork;
import org.usfirst.frc2832.Robot_2015.commands.OpenIngestor;
import org.usfirst.frc2832.Robot_2015.commands.RaiseFork;
import org.usfirst.frc2832.Robot_2015.commands.RaiseOneLevel;
import org.usfirst.frc2832.Robot_2015.commands.Rotate;
import org.usfirst.frc2832.Robot_2015.commands.SpinRollers;
import org.usfirst.frc2832.Robot_2015.commands.StopRollers;
import org.usfirst.frc2832.Robot_2015.commands.ToggleIngestors;
import org.usfirst.frc2832.Robot_2015.commands.ToggleUpperClamp;
import org.usfirst.frc2832.Robot_2015.commands.ZeroLift;
import org.usfirst.frc2832.Robot_2015.commands.ZeroLiftManual;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_1B;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_1T;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_1T1B;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_2T1B;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_3T;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_3T0B;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_AutoZone;
import org.usfirst.frc2832.Robot_2015.commands.auton.Auton_Test;
import org.usfirst.frc2832.Robot_2015.commands.auton.Beta3T;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public GamepadDeadzoned joystick;
    public SendableChooser driveMode;
    public SendableChooser startPos;
    public SendableChooser pattern;
    public Preferences prefs = Preferences.getInstance();
    
    public JoystickButton a, b, x, y, lb, rb;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new GamepadDeadzoned(0);
        
        a  = new JoystickButton(joystick, 1);
        b  = new JoystickButton(joystick, 2);
        x  = new JoystickButton(joystick, 3);
        y  = new JoystickButton(joystick, 4);
        lb = new JoystickButton(joystick, 5);
        rb = new JoystickButton(joystick, 6);
        
        a.whenPressed(new ToggleIngestors());
        b.whenPressed(new LowerOneLevel());
        //x.whenPressed(new DropStack(DropType.platform));
        x.whenPressed(new ToggleUpperClamp());
        y.whenPressed(new RaiseOneLevel());
        lb.whenPressed(new CClampsReverse());
        rb.whenPressed(new CClampsForward());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("RaiseFork", new RaiseFork());

        SmartDashboard.putData("LowerFork", new LowerFork());

        SmartDashboard.putData("MoveDistance", new MoveDistance(1,0.5));

        SmartDashboard.putData("SpinRollers", new SpinRollers(true));
        
        SmartDashboard.putData("StopRollers", new StopRollers());

        SmartDashboard.putData("Rotate", new Rotate(-90,0.4));

        SmartDashboard.putData("Debug Hardware", new DebugHardware());
        
        SmartDashboard.putData("Forwards 2m", new MoveDistance(2.0, 0.4));

        SmartDashboard.putData("CloseFork", new CloseFork());
        
        SmartDashboard.putData("OpenFork", new OpenFork());
        
        SmartDashboard.putData("OpenIngestor", new OpenIngestor());
        
        SmartDashboard.putData("CloseIngestor", new CloseIngestor());
        
        SmartDashboard.putData("Intake object", new Ingest());
        
        SmartDashboard.putData("CClampsForward", new CClampsForward());
        SmartDashboard.putData("CClampsReverse", new CClampsReverse());
        
        SmartDashboard.putData("Lower Fork to Bottom", new ZeroLift());
        
        SmartDashboard.putData("Zero Lift Manually", new ZeroLiftManual());
        
        prefs.putBoolean("RunMoveDistance", false);
        prefs.putDouble("MoveDirectionAngle", 0);
        prefs.putDouble("MoveDirectionDistance_m", 0);
        prefs.putDouble("MoveDirectionTurnSpeed", 0);
        prefs.putDouble("MoveDirectionDriveSpeed", 0);
        prefs.putDouble("RollerSpeed", 1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //Switch Between ROD and FOD
    	driveMode = new SendableChooser();
    	driveMode.addDefault("Robot-Oriented", 0);
    	driveMode.addObject("Field-Oriented", 1);
    	SmartDashboard.putData("Drive Mode", driveMode);
    	
    	startPos = new SendableChooser();
    	startPos.addDefault("Pos 1", 0);
    	startPos.addObject("Pos 2", 1);
    	startPos.addObject("Pos 3", 2);
    	startPos.addObject("Pos 4", 3);
    	startPos.addObject("Pos 5", 4);
    	startPos.addObject("Pos 6", 5);
    	startPos.addObject("BackField", 6);
    	SmartDashboard.putData("Start Position",startPos);
    	
    	pattern = new SendableChooser();
    	pattern.addDefault("To AutoZone", new Auton_AutoZone());
    	pattern.addObject("Grab Tote", new Auton_1T());
    	pattern.addObject("Grab Bin", new Auton_1B());
    	pattern.addObject("Grab Tote & Bin", new Auton_1T1B());
    	pattern.addObject("[UNTESTED] Grab Tote, Bin, and next Tote", new Auton_2T1B());
    	pattern.addObject("[DON'T USE]Grab ALL the Totes", new Auton_3T());
    	pattern.addObject("[UNTESTED] 3 Totes and No Bins", new Auton_3T0B());
    	pattern.addObject("[UNSTABLE] Grab All Totes", new Beta3T());
    	pattern.addObject("Don't Move", new Delay(1));
    	pattern.addObject("Testing - do not use!", new Auton_Test());
    	SmartDashboard.putData("Pattern", pattern);
    	
    	SmartDashboard.putString(",", "Debug Motors");
    	SmartDashboard.putString("'", "Auton Pattern");
    	SmartDashboard.putString("-", "Drive Mode");
    	SmartDashboard.putString("", "Start Position");
    	
    	SmartDashboard.putString(" ", "TELEOP");
    	SmartDashboard.putString("  ", "AUTON");
    	SmartDashboard.putString("   ", "COMMANDS");
    	
    	SmartDashboard.putString("DEBUG", "");
    	SmartDashboard.putString("AUTONOMOUS", "");
    	SmartDashboard.putString("TELEOP", "");
    	SmartDashboard.putString("COMMANDS", "");
    	
        joystick.setAxisChannel(AxisType.kX, 1);
        joystick.setAxisChannel(AxisType.kY, 2);
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

